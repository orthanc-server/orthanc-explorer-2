name: CMake

on:
  push:
    branches: 
      - master
      - github-actions

  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.os }}-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest DLL", 
            artifact: "OrthancExplorer2.dll",
            triplet: x64-windows,
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu latest .so", 
            artifact: "libOrthancExplorer2.so",
            triplet: x64-linux,
            os: ubuntu-latest
          }
        - {
            name: "Mac OSX latest .dylib", 
            artifact: "libOrthancExplorer2.dylib",
            triplet: x64-osx,
            os: ubuntu-latest
          }
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # include:
        #   - os: windows-latest
        #     triplet: x64-windows
        #     artifact: OrthancExplorer2.dll
        #   - os: ubuntu-latest
        #     triplet: x64-linux
        #     artifact: OrthancExplorer2.so
        #   - os: macos-latest
        #     triplet: x64-osx
        #     artifact: OrthancExplorer2.dylib

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - run: npm install
      working-directory: WebApplication

    - run: npm run build
      working-directory: WebApplication
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DSTATIC_BUILD=ON -DALLOW_DOWNLOADS=ON -DUSE_SYSTEM_ORTHANC_SDK=OFF -DORTHANC_FRAMEWORK_SOURCE=web -DORTHANC_FRAMEWORK_VERSION="1.10.0" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: ls build
      run: ls -al
      working-directory: ${{github.workspace}}/build

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ${{github.workspace}}/build/${{matrix.config.artifact}}
        name: ${{matrix.config.artifact}}

  release:
    # TODO: put back !if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url


  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest DLL", 
            artifact: "OrthancExplorer2.dll",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu latest .so", 
            artifact: "libOrthancExplorer2.so",
            os: ubuntu-latest
          }
        - {
            name: "Mac OSX latest .dylib", 
            artifact: "libOrthancExplorer2.dylib",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
